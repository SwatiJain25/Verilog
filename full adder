module main;
    reg a, b, c;              // Input signals
    wire sum, carry;          // Output signals

    // Instantiate the full adder module
    fulladder add(a, b, c, sum, carry);

    always @(sum or carry) begin
        // Display output whenever 'sum' or 'carry' changes
        // $dumpfile("add.vcd");
        // $dumpvars(0, add);
        $display("Input A = %b B = %b C = %b Sum = %b Carry = %b\n", a, b, c, sum, carry);
    end

    initial begin
        // Apply test cases with #5 delays
        a = 0; b = 0; c = 0;
        #5
        a = 0; b = 0; c = 1;
        #5
        a = 0; b = 1; c = 0;
        #5
        a = 0; b = 1; c = 1;
        #5
        a = 1; b = 0; c = 0;
        #5
        a = 1; b = 0; c = 1;
        #5
        a = 1; b = 1; c = 0;
        #5
        a = 1; b = 1; c = 1;
    end
endmodule


module fulladder(a, b, c, sum, carry);
input a, b, c;
output sum, carry;
wire sum, carry;
assign sum = a^b^c; //sum bit
assign carry = ((a&b) | (b&c) | (a&c)); //carry bit
endmodule
